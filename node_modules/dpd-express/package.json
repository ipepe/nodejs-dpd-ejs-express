{
  "name": "dpd-express",
  "version": "0.0.1",
  "description": "run express as a dpd resource",
  "main": "index.js",
  "author": {
    "name": "Ritchie Martori"
  },
  "license": "MIT",
  "dependencies": {
    "express": "~3.0.0rc2"
  },
  "readme": "# dpd-express\n\nuse express as a dpd resource\n\n## install\n\nIn your project root, run:\n\n    mkdir node_modules\n    npm install dpd-express\n    \n## events\n\nThere is only 1 event right now: init. Create it in the dashboard or include a folder like this:\n\n    /my-project\n     /resources\n      /express\n       /init.js\n\nInit is run when the resource is loaded. Inside `init.js` you get `app` which is a running express app. Handle anything like a normal express app:\n\n    app.get('/foo', function(req, res) {\n      res.send('bar');\n    });\n  \nor middleware\n\n    app.use(function(req, res, next) {\n      req.called = 'my middleware';\n      next();\n    });\n  \nIn other resources, this will be available as `ctx.req.called`.\n\nYou also get access to the dpd object, bound to the current request.\n\nRender some todos:\n\n    app.get('/foo', function(req, res) {\n      req.dpd.todos.get(function(todos) {\n        res.render('index.ejs', {todos: todos})\n      });\n    });\n  \nThe request also comes with the `me` object if it exists.\n\n    app.get('/me', function(req, res) {\n      res.send(req.me);\n    });\n\nYou can `require()` modules. They must be installed at the root of your project (`/my-project/node_modules`).",
  "_id": "dpd-express@0.0.1",
  "dist": {
    "shasum": "19b91a55cec92e6486000dc3c1b42e831faec517",
    "tarball": "http://registry.npmjs.org/dpd-express/-/dpd-express-0.0.1.tgz"
  },
  "maintainers": [
    {
      "name": "ritch",
      "email": "skawful@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "19b91a55cec92e6486000dc3c1b42e831faec517",
  "_from": "dpd-express@",
  "_resolved": "https://registry.npmjs.org/dpd-express/-/dpd-express-0.0.1.tgz"
}
